语法：result=mindistance(Point p1,Point p2,Point q);
 
 

 
 
参数：
 
 

 
 
p1～p4：
 
 
直线上不相同的两点
 
 

 
 
*p：
 
 
通过指针返回结果
 
 

 
 
返回值：
 
 
1：两直线相交；2：两直线平行
 
 

 
 
注意：
 
 
 
 
 

 
 
 
 
 
如需要判断两线段交点，检验k和对应k1（注释中）的值是否在0～1之间，用在0～1之间的那个求交点
 
 

 
 
源程序：
 
 
 
 
 

 
 
 
 
 
typedefstruct {

   double x,y;

} Point;
int linecorss(Point p1,Point p2,Point p3,Point p4,Point *p)

{

  double k;
   //同一直线
 if ((p4.x-p3.x)*(p1.y-p3.y)-(p4.y-p3.y)*(p1.x-p3.x)==0&&
        (p2.x-p1.x)*(p1.y-p3.y)-(p2.y-p1.y)*(p1.x-p3.x)==0) return 2;
   //平行，不同一直线
 if ((p4.y-p3.y)*(p2.x-p1.x)-(p4.x-p3.x)*(p2.y-p1.y)==0) return 0;
 
    k=((p4.x-p3.x)*(p1.y-p3.y)-(p4.y-p3.y)*(p1.x-p3.x))/((p4.y-p3.y)*(p2.x-p1.x)-(p4.x-p3.x)*(p2.y-p1.y));
//k1=((p2.x-p1.x)*(p1.y-p3.y)-(p2.y-p1.y)*(p1.x-p3.x))/((p4.y-p3.y)*(p2.x-p1.x)-(p4.x-p3.x)*(p2.y-p1.y));
   (*p).x=p1.x+k*(p2.x-p1.x);
   (*p).y=p1.y+k*(p2.y-p1.y);
   return 1;//有交点} 
